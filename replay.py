import os
import sys
from utils import find_touchscreen, push, execute_adb_shell, get_api_version
from exec_cmd import execute_intercept, execute_background


#   replay: push executable and trace file to device, execute in adb
#   trace: trace file generated by getevent -t
#   background: run in detached thread: would not block I/O, kill with kill -9
#   offset: add an offset(ms) to mysendevent actions (-280~-180 seems nice on S6E)
#   delay: (used in record()) delay(s) before executing mysendevent
def replay(trace, background=False, offset=0, delay=0):
	# args
	exe_local_path = 'mysendevent-arm64'
	exe_remote_path = '/data/local/tmp/mysendevent-arm64'
	trace_local_path = trace
	trace_remote_path = '/data/local/tmp/' + trace

	touch_screen_event = find_touchscreen()
	execute_adb_shell('cd ' + '/data/local/tmp/')
	push(exe_local_path, exe_remote_path, force=True)
	push(trace_local_path, trace_remote_path, force=True)
	execute_adb_shell('chmod +x ' + exe_remote_path)  # 'Permission denied'
	if get_api_version() < 23:
		cmd_string = 'adb shell ' + exe_remote_path + ' ' + touch_screen_event + ' ' + trace_remote_path + ' ' + str(offset)
	else:
		cmd_string = 'adb exec-out ' + exe_remote_path + ' ' + touch_screen_event + ' ' + trace_remote_path + ' ' + str(offset)
	if background:
		execute_background(cmd_string, delay=delay, outfile=sys.stdout)
	else:
		execute_intercept(cmd_string, delay=delay, outfile=sys.stdout)


if __name__ == '__main__':
	# compile mysendevent
	os.system('../../../Desktop/toolchain/bin/aarch64-linux-android-gcc --static mysendevent.c -o mysendevent-arm64')
	replay('trace_01_b.txt', offset=-220)
